// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username,
    hased_password,
    full_name,
    email
) VALUES (
    $1,$2,$3,$4
) RETURNING username, hased_password, email, full_name, password_changed_at, created_at, is_email_verified
`

type CreateUserParams struct {
	Username      string `json:"username"`
	HasedPassword string `json:"hased_password"`
	FullName      string `json:"full_name"`
	Email         string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.HasedPassword,
		arg.FullName,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HasedPassword,
		&i.Email,
		&i.FullName,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.IsEmailVerified,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT username, hased_password, email, full_name, password_changed_at, created_at, is_email_verified FROM users 
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HasedPassword,
		&i.Email,
		&i.FullName,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.IsEmailVerified,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET 
    hased_password = COALESCE($1,hased_password),
    full_name =COALESCE($2,full_name),
    email = COALESCE($3,email)
WHERE 
    username = $4
RETURNING username, hased_password, email, full_name, password_changed_at, created_at, is_email_verified
`

type UpdateUserParams struct {
	HasedPassword sql.NullString `json:"hased_password"`
	FullName      sql.NullString `json:"full_name"`
	Email         sql.NullString `json:"email"`
	Username      string         `json:"username"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.HasedPassword,
		arg.FullName,
		arg.Email,
		arg.Username,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HasedPassword,
		&i.Email,
		&i.FullName,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.IsEmailVerified,
	)
	return i, err
}
